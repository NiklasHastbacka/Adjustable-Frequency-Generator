
frekvensgen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800130  00800130  00000dcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e7  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  000020db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  0000331c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00003594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfb  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_1>
   8:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_2>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e0       	ldi	r30, 0x08	; 8
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 33       	cpi	r26, 0x30	; 48
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e3       	ldi	r26, 0x30	; 48
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 33       	cpi	r26, 0x3A	; 58
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 a0 03 	call	0x740	; 0x740 <main>
  b2:	0c 94 82 06 	jmp	0xd04	; 0xd04 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <LCD_enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	00 00       	nop
	//
	//	Toggle enable pin (first high then low)
	// 
	//*****************************************************************************
	_delay_us(1);
    LCD_CTRL_PORT |= (1<<LCD_en);	// Sets EN pin
  bc:	82 b1       	in	r24, 0x02	; 2
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	82 b9       	out	0x02, r24	; 2
  c2:	00 00       	nop
	_delay_us(1);
	LCD_CTRL_PORT &= ~(1<<LCD_en);	// Clears EN pin
  c4:	82 b1       	in	r24, 0x02	; 2
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	82 b9       	out	0x02, r24	; 2
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <LCD_command>:
	_delay_us(1);
}
void LCD_command(unsigned char command)
{
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
	//
	//	Convert a 8-bit command to 4-bit
	// 
	//*****************************************************************************
	
	LCD_CTRL_PORT &= ~(1<<LCD_rs); 									// Clear RS pin
  d2:	82 b1       	in	r24, 0x02	; 2
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 b9       	out	0x02, r24	; 2
    LCD_DATA_PORT = (command & 0xF0)|(LCD_DATA_PORT & 0x0F);		// For writing the high nibble, the low nibble of the argument is cleared
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	9c 2f       	mov	r25, r28
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	89 2b       	or	r24, r25
  e2:	88 b9       	out	0x08, r24	; 8
    LCD_enable();													// Toggle enable
  e4:	0e 94 5d 00 	call	0xba	; 0xba <LCD_enable>
	LCD_DATA_PORT = (command << 4 & 0xF0)|(LCD_DATA_PORT & 0x0F);	// For writing the low nibble, the high nibble of the argument is cleread, argument has to be shifted since datalines are on high port lines.
  e8:	20 e1       	ldi	r18, 0x10	; 16
  ea:	c2 9f       	mul	r28, r18
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	98 b1       	in	r25, 0x08	; 8
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	89 2b       	or	r24, r25
  f6:	88 b9       	out	0x08, r24	; 8
    LCD_enable();
  f8:	0e 94 5d 00 	call	0xba	; 0xba <LCD_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	89 ef       	ldi	r24, 0xF9	; 249
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_command+0x32>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_command+0x38>
 106:	00 00       	nop
    _delay_ms(1);
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LCD_putc>:

void LCD_putc(char ascii)
{
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
	//  Doesn´t support following letters å,Å,Ä and Ö
	//
	//*****************************************************************************
	
	
	if(ascii=='ä') ascii=225; 									// Convert ä to 225
 110:	84 3e       	cpi	r24, 0xE4	; 228
 112:	09 f4       	brne	.+2      	; 0x116 <LCD_putc+0xa>
 114:	c1 ee       	ldi	r28, 0xE1	; 225
 	if(ascii=='ö') ascii=239; 									// Convert ö to 239
 116:	c6 3f       	cpi	r28, 0xF6	; 246
 118:	09 f4       	brne	.+2      	; 0x11c <LCD_putc+0x10>
 11a:	cf ee       	ldi	r28, 0xEF	; 239
	
	LCD_CTRL_PORT |= (1<<LCD_rs);								// Set RS pin
 11c:	82 b1       	in	r24, 0x02	; 2
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	82 b9       	out	0x02, r24	; 2
    LCD_DATA_PORT = (ascii & 0xF0)|(LCD_DATA_PORT & 0x0F);		// For writing the high nibble, the low nibble of the argument is cleared
 122:	88 b1       	in	r24, 0x08	; 8
 124:	9c 2f       	mov	r25, r28
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	89 2b       	or	r24, r25
 12c:	88 b9       	out	0x08, r24	; 8
	LCD_enable();												// Toggle enable to write high nibble
 12e:	0e 94 5d 00 	call	0xba	; 0xba <LCD_enable>

	LCD_DATA_PORT = (ascii << 4 & 0xF0)|(LCD_DATA_PORT & 0x0F); // For writing the low nibble, the high nibble of the argument is cleread, argument has to be shifted since datalines are on high port lines.
 132:	20 e1       	ldi	r18, 0x10	; 16
 134:	c2 9f       	mul	r28, r18
 136:	c0 01       	movw	r24, r0
 138:	11 24       	eor	r1, r1
 13a:	98 b1       	in	r25, 0x08	; 8
 13c:	9f 70       	andi	r25, 0x0F	; 15
 13e:	89 2b       	or	r24, r25
 140:	88 b9       	out	0x08, r24	; 8
    LCD_enable();												// Toggle enable write low nibble
 142:	0e 94 5d 00 	call	0xba	; 0xba <LCD_enable>
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_putc+0x3e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_putc+0x44>
 150:	00 00       	nop
	_delay_ms(1);

}
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCD_nibble>:
	//
	//	Send high nibble (DB4 - DB7), low nibble is cleared (DB0 - DB3)
	//
	//*****************************************************************************
	
	LCD_CTRL_PORT &= ~(1<<LCD_rs);							// Clear RS pin
 156:	92 b1       	in	r25, 0x02	; 2
 158:	9f 7d       	andi	r25, 0xDF	; 223
 15a:	92 b9       	out	0x02, r25	; 2
    LCD_DATA_PORT = (nibble & 0xF0)|(LCD_DATA_PORT & 0x0F);	// For writing the high nibble, the low nibble of the argument is cleared
 15c:	98 b1       	in	r25, 0x08	; 8
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	9f 70       	andi	r25, 0x0F	; 15
 162:	89 2b       	or	r24, r25
 164:	88 b9       	out	0x08, r24	; 8
    LCD_enable();
 166:	0e 94 5d 00 	call	0xba	; 0xba <LCD_enable>
 16a:	89 ef       	ldi	r24, 0xF9	; 249
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_nibble+0x18>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_nibble+0x1e>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <LCD_puti>:
	LCD_command(0x80+p);				// Move cursor to given position
	waitForLCD();						// Wait until display is ready
}

void LCD_puti(unsigned int v)
{
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
	//*****************************************************************************
  
	  unsigned d;       
	  char tkn=' ';
  
	  d=v/10000%10;
 180:	9c 01       	movw	r18, r24
 182:	32 95       	swap	r19
 184:	22 95       	swap	r18
 186:	2f 70       	andi	r18, 0x0F	; 15
 188:	23 27       	eor	r18, r19
 18a:	3f 70       	andi	r19, 0x0F	; 15
 18c:	23 27       	eor	r18, r19
 18e:	a7 e4       	ldi	r26, 0x47	; 71
 190:	b3 e0       	ldi	r27, 0x03	; 3
 192:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 196:	ac 01       	movw	r20, r24
 198:	56 95       	lsr	r21
 19a:	47 95       	ror	r20
 19c:	56 95       	lsr	r21
 19e:	47 95       	ror	r20
 1a0:	56 95       	lsr	r21
 1a2:	47 95       	ror	r20
 1a4:	9a 01       	movw	r18, r20
 1a6:	ad ec       	ldi	r26, 0xCD	; 205
 1a8:	bc ec       	ldi	r27, 0xCC	; 204
 1aa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	9c 01       	movw	r18, r24
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	82 0f       	add	r24, r18
 1ce:	93 1f       	adc	r25, r19
 1d0:	9a 01       	movw	r18, r20
 1d2:	28 1b       	sub	r18, r24
 1d4:	39 0b       	sbc	r19, r25
 1d6:	c9 01       	movw	r24, r18
	  if(d)
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	29 f0       	breq	.+10     	; 0x1e6 <LCD_puti+0x6e>
	  {
	    LCD_putc(d+'0');
 1dc:	80 5d       	subi	r24, 0xD0	; 208
 1de:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
	    tkn='0';
 1e2:	10 e3       	ldi	r17, 0x30	; 48
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <LCD_puti+0x76>
	  } 
	  else LCD_putc(tkn);
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
	//	Prints numbers on the LCD
	// 
	//*****************************************************************************
  
	  unsigned d;       
	  char tkn=' ';
 1ec:	10 e2       	ldi	r17, 0x20	; 32
	    LCD_putc(d+'0');
	    tkn='0';
	  } 
	  else LCD_putc(tkn);
  
	  d=v/1000%10;
 1ee:	9e 01       	movw	r18, r28
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
 1f4:	36 95       	lsr	r19
 1f6:	27 95       	ror	r18
 1f8:	36 95       	lsr	r19
 1fa:	27 95       	ror	r18
 1fc:	a5 ec       	ldi	r26, 0xC5	; 197
 1fe:	b0 e2       	ldi	r27, 0x20	; 32
 200:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 204:	ac 01       	movw	r20, r24
 206:	52 95       	swap	r21
 208:	42 95       	swap	r20
 20a:	4f 70       	andi	r20, 0x0F	; 15
 20c:	45 27       	eor	r20, r21
 20e:	5f 70       	andi	r21, 0x0F	; 15
 210:	45 27       	eor	r20, r21
 212:	9a 01       	movw	r18, r20
 214:	ad ec       	ldi	r26, 0xCD	; 205
 216:	bc ec       	ldi	r27, 0xCC	; 204
 218:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	9c 01       	movw	r18, r24
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	82 0f       	add	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	9a 01       	movw	r18, r20
 240:	28 1b       	sub	r18, r24
 242:	39 0b       	sbc	r19, r25
 244:	c9 01       	movw	r24, r18
	  if(d)
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	29 f0       	breq	.+10     	; 0x254 <LCD_puti+0xdc>
	  {
	    LCD_putc(d+'0');
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
	    tkn='0';        
 250:	10 e3       	ldi	r17, 0x30	; 48
 252:	03 c0       	rjmp	.+6      	; 0x25a <LCD_puti+0xe2>
	  }
	  else LCD_putc(tkn);
 254:	81 2f       	mov	r24, r17
 256:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>

	  d=v/100%10;
 25a:	9e 01       	movw	r18, r28
 25c:	36 95       	lsr	r19
 25e:	27 95       	ror	r18
 260:	36 95       	lsr	r19
 262:	27 95       	ror	r18
 264:	ab e7       	ldi	r26, 0x7B	; 123
 266:	b4 e1       	ldi	r27, 0x14	; 20
 268:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 26c:	ac 01       	movw	r20, r24
 26e:	56 95       	lsr	r21
 270:	47 95       	ror	r20
 272:	9a 01       	movw	r18, r20
 274:	ad ec       	ldi	r26, 0xCD	; 205
 276:	bc ec       	ldi	r27, 0xCC	; 204
 278:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	9c 01       	movw	r18, r24
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	82 0f       	add	r24, r18
 29c:	93 1f       	adc	r25, r19
 29e:	9a 01       	movw	r18, r20
 2a0:	28 1b       	sub	r18, r24
 2a2:	39 0b       	sbc	r19, r25
 2a4:	c9 01       	movw	r24, r18
	  if(d)
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	29 f0       	breq	.+10     	; 0x2b4 <LCD_puti+0x13c>
	  {
	    LCD_putc(d+'0');
 2aa:	80 5d       	subi	r24, 0xD0	; 208
 2ac:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
	    tkn='0';
 2b0:	10 e3       	ldi	r17, 0x30	; 48
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <LCD_puti+0x142>
	  }
	  else LCD_putc(tkn);
 2b4:	81 2f       	mov	r24, r17
 2b6:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>

	  d=v/10%10;
 2ba:	9e 01       	movw	r18, r28
 2bc:	ad ec       	ldi	r26, 0xCD	; 205
 2be:	bc ec       	ldi	r27, 0xCC	; 204
 2c0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 2c4:	ac 01       	movw	r20, r24
 2c6:	56 95       	lsr	r21
 2c8:	47 95       	ror	r20
 2ca:	56 95       	lsr	r21
 2cc:	47 95       	ror	r20
 2ce:	56 95       	lsr	r21
 2d0:	47 95       	ror	r20
 2d2:	9a 01       	movw	r18, r20
 2d4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	9c 01       	movw	r18, r24
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	9a 01       	movw	r18, r20
 2fc:	28 1b       	sub	r18, r24
 2fe:	39 0b       	sbc	r19, r25
 300:	c9 01       	movw	r24, r18
	  if(d)
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	21 f0       	breq	.+8      	; 0x30e <LCD_puti+0x196>
	  { 
	    LCD_putc(d+'0'); 
 306:	80 5d       	subi	r24, 0xD0	; 208
 308:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
 30c:	03 c0       	rjmp	.+6      	; 0x314 <LCD_puti+0x19c>
	    tkn='0';
	  }
	  else LCD_putc(tkn);
 30e:	81 2f       	mov	r24, r17
 310:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
	  LCD_putc(v%10+'0');
 314:	9e 01       	movw	r18, r28
 316:	ad ec       	ldi	r26, 0xCD	; 205
 318:	bc ec       	ldi	r27, 0xCC	; 204
 31a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	9c 01       	movw	r18, r24
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	82 0f       	add	r24, r18
 33e:	93 1f       	adc	r25, r19
 340:	9e 01       	movw	r18, r28
 342:	28 1b       	sub	r18, r24
 344:	39 0b       	sbc	r19, r25
 346:	c9 01       	movw	r24, r18
 348:	80 5d       	subi	r24, 0xD0	; 208
 34a:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
}  
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	08 95       	ret

00000356 <waitForLCD>:
	//	Check the busy flag (DB7)
	// 
	//*****************************************************************************
   
   
   LCD_CTRL_PORT &= ~(1<<LCD_rs);   	// Clear RS pin, defined in header file
 356:	82 b1       	in	r24, 0x02	; 2
 358:	8f 7d       	andi	r24, 0xDF	; 223
 35a:	82 b9       	out	0x02, r24	; 2
   LCD_CTRL_PORT |= (1<<LCD_rw);   		// Set R/W pin (enable read mode), defined in header file
 35c:	82 b1       	in	r24, 0x02	; 2
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	82 b9       	out	0x02, r24	; 2
   
   LCD_DATA_DDR &= ~0xF0;				// Set PC4 - PC7 to input
 362:	87 b1       	in	r24, 0x07	; 7
 364:	8f 70       	andi	r24, 0x0F	; 15
 366:	87 b9       	out	0x07, r24	; 7
 
      	LCD_CTRL_PORT &= ~(1<<LCD_en);	// Clear EN pin
	  	_delay_us(1);
   	} 
	
	LCD_DATA_DDR |= 0xF0;				// Set PC4 - PC7 to output
 368:	87 b1       	in	r24, 0x07	; 7
 36a:	80 6f       	ori	r24, 0xF0	; 240
 36c:	87 b9       	out	0x07, r24	; 7
	LCD_CTRL_PORT &= ~(1<<LCD_rw);		// Clear R/W pin (enable write mode)
 36e:	82 b1       	in	r24, 0x02	; 2
 370:	8f 7b       	andi	r24, 0xBF	; 191
 372:	82 b9       	out	0x02, r24	; 2
 374:	08 95       	ret

00000376 <LCD_puts>:
	_delay_ms(1);

}

void LCD_puts(char *lcd_string)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	ec 01       	movw	r28, r24
	//
	//	Prints strings on the LCD
	//
	//*****************************************************************************
	
	while (*lcd_string)
 37c:	05 c0       	rjmp	.+10     	; 0x388 <LCD_puts+0x12>
   	{  
	  LCD_putc(*lcd_string++);								// Character by character
 37e:	21 96       	adiw	r28, 0x01	; 1
 380:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
	  waitForLCD();											// Wait until display is ready
 384:	0e 94 ab 01 	call	0x356	; 0x356 <waitForLCD>
	//
	//	Prints strings on the LCD
	//
	//*****************************************************************************
	
	while (*lcd_string)
 388:	88 81       	ld	r24, Y
 38a:	81 11       	cpse	r24, r1
 38c:	f8 cf       	rjmp	.-16     	; 0x37e <LCD_puts+0x8>
   	{  
	  LCD_putc(*lcd_string++);								// Character by character
	  waitForLCD();											// Wait until display is ready
   	}
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <LCD_init>:
	//	Intilializes the LCD
	//	4-bits interface
	//
	//****************************************************************************

   	LCD_CTRL_PORT &= ~(1<<LCD_rs);   		// Clear RS pin, defined in header file
 394:	82 b1       	in	r24, 0x02	; 2
 396:	8f 7d       	andi	r24, 0xDF	; 223
 398:	82 b9       	out	0x02, r24	; 2
   	LCD_CTRL_PORT &= ~(1<<LCD_rw);   		// Clear R/W pin, defined in header file
 39a:	82 b1       	in	r24, 0x02	; 2
 39c:	8f 7b       	andi	r24, 0xBF	; 191
 39e:	82 b9       	out	0x02, r24	; 2
   	LCD_CTRL_PORT &= ~(1<<LCD_en);   		// Clear EN pin. defined in header file
 3a0:	82 b1       	in	r24, 0x02	; 2
 3a2:	8f 77       	andi	r24, 0x7F	; 127
 3a4:	82 b9       	out	0x02, r24	; 2
	
	LCD_CTRL_DDR |= (1<<LCD_rs);			// Set RS pin (output)
 3a6:	81 b1       	in	r24, 0x01	; 1
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	81 b9       	out	0x01, r24	; 1
   	LCD_CTRL_DDR |= (1<<LCD_rw);			// Set R/W pin (output)
 3ac:	81 b1       	in	r24, 0x01	; 1
 3ae:	80 64       	ori	r24, 0x40	; 64
 3b0:	81 b9       	out	0x01, r24	; 1
   	LCD_CTRL_DDR |= (1<<LCD_en);			// Set EN pin (output)
 3b2:	81 b1       	in	r24, 0x01	; 1
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	81 b9       	out	0x01, r24	; 1

	LCD_DATA_DDR |= 0xF0;					// Set PC4 - PC7 to output
 3b8:	87 b1       	in	r24, 0x07	; 7
 3ba:	80 6f       	ori	r24, 0xF0	; 240
 3bc:	87 b9       	out	0x07, r24	; 7
 3be:	87 ea       	ldi	r24, 0xA7	; 167
 3c0:	91 e6       	ldi	r25, 0x61	; 97
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCD_init+0x2e>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_init+0x34>
 3c8:	00 00       	nop
    _delay_ms(100);      					// Delay after power up
	
	LCD_nibble(0x20);						// Select 4-bit mode
 3ca:	80 e2       	ldi	r24, 0x20	; 32
 3cc:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_nibble>
 3d0:	87 e8       	ldi	r24, 0x87	; 135
 3d2:	93 e1       	ldi	r25, 0x13	; 19
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_init+0x40>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_init+0x46>
 3da:	00 00       	nop
    _delay_ms(20);
	
	LCD_function_set();						// See header file for more detailed information
 3dc:	88 e2       	ldi	r24, 0x28	; 40
 3de:	0e 94 67 00 	call	0xce	; 0xce <LCD_command>
 3e2:	83 ec       	ldi	r24, 0xC3	; 195
 3e4:	99 e0       	ldi	r25, 0x09	; 9
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_init+0x52>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_init+0x58>
 3ec:	00 00       	nop
   	_delay_ms(10);
	   	
	LCD_function_set();						// See header file for more detailed information
 3ee:	88 e2       	ldi	r24, 0x28	; 40
 3f0:	0e 94 67 00 	call	0xce	; 0xce <LCD_command>
   	waitForLCD();							// Wait until display is ready
 3f4:	0e 94 ab 01 	call	0x356	; 0x356 <waitForLCD>

	//LCD_display_off();					// See header file for more detailed information
	LCD_display_on();
 3f8:	8f e0       	ldi	r24, 0x0F	; 15
 3fa:	0e 94 67 00 	call	0xce	; 0xce <LCD_command>
	waitForLCD();							// Wait until display is ready
 3fe:	0e 94 ab 01 	call	0x356	; 0x356 <waitForLCD>
   	
	LCD_display_clear();					// See header file for more detailed information
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 67 00 	call	0xce	; 0xce <LCD_command>
	waitForLCD();							// Wait until display is ready
 408:	0e 94 ab 01 	call	0x356	; 0x356 <waitForLCD>
   	
	LCD_entry_mode_set();					// See header file for more detailed information
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	0e 94 67 00 	call	0xce	; 0xce <LCD_command>
	waitForLCD();							// Wait until display is ready
 412:	0e 94 ab 01 	call	0x356	; 0x356 <waitForLCD>
 416:	83 ed       	ldi	r24, 0xD3	; 211
 418:	90 e3       	ldi	r25, 0x30	; 48
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	08 95       	ret

00000424 <LCD_goto>:
	//
	//	Move the cursor to given position (rows are defined in header file)
	// 
	//*****************************************************************************
	
	LCD_CTRL_PORT &= ~(1<<LCD_rs);   	// Clear RS pin
 424:	92 b1       	in	r25, 0x02	; 2
 426:	9f 7d       	andi	r25, 0xDF	; 223
 428:	92 b9       	out	0x02, r25	; 2
   	LCD_CTRL_PORT &= ~(1<<LCD_rw);  	// Clear R/W pin
 42a:	92 b1       	in	r25, 0x02	; 2
 42c:	9f 7b       	andi	r25, 0xBF	; 191
 42e:	92 b9       	out	0x02, r25	; 2
	LCD_command(0x80+p);				// Move cursor to given position
 430:	80 58       	subi	r24, 0x80	; 128
 432:	0e 94 67 00 	call	0xce	; 0xce <LCD_command>
	waitForLCD();						// Wait until display is ready
 436:	0e 94 ab 01 	call	0x356	; 0x356 <waitForLCD>
 43a:	08 95       	ret

0000043c <__vector_15>:
	return(0);
}


ISR(TIMER1_OVF_vect)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
	PORTA ^= 0x80;	// Toggle PA7, this generates a square wave signal
 44a:	82 b1       	in	r24, 0x02	; 2
 44c:	80 58       	subi	r24, 0x80	; 128
 44e:	82 b9       	out	0x02, r24	; 2
	TCNT1 = count;	// Reload the Timer1 counter register with 'count' Value(59286)
 450:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count>
 454:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count+0x1>
 458:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
 45c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
}
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_2>:
	FREQ_count(); // Recalculate and update freq
}

// Interrupt service routine for INT1 
ISR(INT1_vect)
{
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
	cli();
 490:	f8 94       	cli

	n++; // Increment the mode index for prescaler adjustments
 492:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <n>
 496:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <n+0x1>
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <n+0x1>
 4a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <n>
	
	if (n == 17) n = 12; // Wrap around if 'n' exceeds the limit (Mode cycling)
 4a4:	41 97       	sbiw	r24, 0x11	; 17
 4a6:	31 f4       	brne	.+12     	; 0x4b4 <__vector_2+0x46>
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <n+0x1>
 4b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <n>
	
	LCD_goto(ROW4+1);
 4b4:	85 e5       	ldi	r24, 0x55	; 85
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>


	if (n == 12) steg = 10000;
 4bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <n>
 4c0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <n+0x1>
 4c4:	8c 30       	cpi	r24, 0x0C	; 12
 4c6:	91 05       	cpc	r25, r1
 4c8:	39 f4       	brne	.+14     	; 0x4d8 <__vector_2+0x6a>
 4ca:	80 e1       	ldi	r24, 0x10	; 16
 4cc:	97 e2       	ldi	r25, 0x27	; 39
 4ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4d6:	23 c0       	rjmp	.+70     	; 0x51e <__vector_2+0xb0>
	else if (n == 13) steg = 1000;
 4d8:	8d 30       	cpi	r24, 0x0D	; 13
 4da:	91 05       	cpc	r25, r1
 4dc:	39 f4       	brne	.+14     	; 0x4ec <__vector_2+0x7e>
 4de:	88 ee       	ldi	r24, 0xE8	; 232
 4e0:	93 e0       	ldi	r25, 0x03	; 3
 4e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ea:	19 c0       	rjmp	.+50     	; 0x51e <__vector_2+0xb0>
	else if (n == 14) steg = 100;
 4ec:	8e 30       	cpi	r24, 0x0E	; 14
 4ee:	91 05       	cpc	r25, r1
 4f0:	39 f4       	brne	.+14     	; 0x500 <__vector_2+0x92>
 4f2:	84 e6       	ldi	r24, 0x64	; 100
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4fe:	0f c0       	rjmp	.+30     	; 0x51e <__vector_2+0xb0>
	else if (n == 15) steg = 10;
 500:	0f 97       	sbiw	r24, 0x0f	; 15
 502:	39 f4       	brne	.+14     	; 0x512 <__vector_2+0xa4>
 504:	8a e0       	ldi	r24, 0x0A	; 10
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 50c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 510:	06 c0       	rjmp	.+12     	; 0x51e <__vector_2+0xb0>
	else steg = 1;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 51a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	sei(); // Re-enable global interrupts
 51e:	78 94       	sei
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <PORT_init>:
}

// Initialize the microcontrollers ports
void PORT_init(void)
{
	DDRA = 0x80; // Set PA7 as output (for signal generation)
 542:	80 e8       	ldi	r24, 0x80	; 128
 544:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x00; // Set port B pins as inputs (for encoder and buttons)
 546:	14 b8       	out	0x04, r1	; 4
 548:	08 95       	ret

0000054a <INT_init>:

// Initialize the interrupt system
void INT_init(void)
{
	// Configure interrupts for INT0 and INT1 to trigger on a falling edge (when signal goes from high to low)
	EICRA = 0x0A;  // Falling edge trigger for INT0 and INT1
 54a:	8a e0       	ldi	r24, 0x0A	; 10
 54c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
	
	// Enable interrupts for INT0 and INT1
	EIMSK = 0x03;  // Enable INT0 (bit 0) and INT1 (bit 1)
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	8d bb       	out	0x1d, r24	; 29
	
	// Set Timer1 prescaler based on 'i'. This controls how fast Timer1 counts.
	TCCR1B = (i + 1);  // Prescaler based on value of 'i'
 554:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 558:	8f 5f       	subi	r24, 0xFF	; 255
 55a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	
	// Initialize Timer1 counter with 'count' value
	TCNT1 = count;  // Set initial counter value
 55e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count>
 562:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count+0x1>
 566:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
 56a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	// Enable Timer1 overflow interrupt (TOIE1), which triggers when Timer1 overflows
	TIMSK1 = 0x01;  // Enable Timer1 overflow interrupt
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
	
	// Enable pin change interrupts on Port B (for buttons)
	PCICR = 0x02;  // Enable pin change interrupts on Port B (PCINT1)
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>

	// Enable interrupts for PB0, PB1, PB2 (buttons connected to these pins)
	PCMSK1 = 0x07;  // Enable interrupts for PB0, PB1, PB2
 57a:	87 e0       	ldi	r24, 0x07	; 7
 57c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f006c>
	
	sei(); // Enable global interrupts
 580:	78 94       	sei
 582:	08 95       	ret

00000584 <FREQ_count>:

}

// Function to calculate and display the frequency on the LCD
void FREQ_count()
{
 584:	8f 92       	push	r8
 586:	9f 92       	push	r9
 588:	af 92       	push	r10
 58a:	bf 92       	push	r11
 58c:	cf 92       	push	r12
 58e:	df 92       	push	r13
 590:	ef 92       	push	r14
 592:	ff 92       	push	r15
	cli(); // Disable global interrupts to safely calculate freq
 594:	f8 94       	cli
	
	// Calculate the frequency using the formula
	freq = (float) 20000000 / 2 / presc[i] / (1 + 65535 - count);
 596:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <i>
 59a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <i+0x1>
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	ea 5f       	subi	r30, 0xFA	; 250
 5a4:	fe 4f       	sbci	r31, 0xFE	; 254
 5a6:	60 81       	ld	r22, Z
 5a8:	71 81       	ldd	r23, Z+1	; 0x01
 5aa:	07 2e       	mov	r0, r23
 5ac:	00 0c       	add	r0, r0
 5ae:	88 0b       	sbc	r24, r24
 5b0:	99 0b       	sbc	r25, r25
 5b2:	0e 94 6f 05 	call	0xade	; 0xade <__floatsisf>
 5b6:	9b 01       	movw	r18, r22
 5b8:	ac 01       	movw	r20, r24
 5ba:	60 e8       	ldi	r22, 0x80	; 128
 5bc:	76 e9       	ldi	r23, 0x96	; 150
 5be:	88 e1       	ldi	r24, 0x18	; 24
 5c0:	9b e4       	ldi	r25, 0x4B	; 75
 5c2:	0e 94 c5 04 	call	0x98a	; 0x98a <__divsf3>
 5c6:	6b 01       	movw	r12, r22
 5c8:	7c 01       	movw	r14, r24
 5ca:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count>
 5ce:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <count+0x1>
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	a1 e0       	ldi	r26, 0x01	; 1
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	bc 01       	movw	r22, r24
 5dc:	cd 01       	movw	r24, r26
 5de:	62 1b       	sub	r22, r18
 5e0:	73 0b       	sbc	r23, r19
 5e2:	81 09       	sbc	r24, r1
 5e4:	91 09       	sbc	r25, r1
 5e6:	0e 94 6f 05 	call	0xade	; 0xade <__floatsisf>
 5ea:	9b 01       	movw	r18, r22
 5ec:	ac 01       	movw	r20, r24
 5ee:	c7 01       	movw	r24, r14
 5f0:	b6 01       	movw	r22, r12
 5f2:	0e 94 c5 04 	call	0x98a	; 0x98a <__divsf3>
 5f6:	6b 01       	movw	r12, r22
 5f8:	7c 01       	movw	r14, r24
 5fa:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 5fe:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 602:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 606:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	
	freq_helt = freq; // Get the integer part of the frequency
 60a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixsfsi>
 60e:	4b 01       	movw	r8, r22
 610:	5c 01       	movw	r10, r24
 612:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <freq_helt>
 616:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <freq_helt+0x1>
 61a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <freq_helt+0x2>
 61e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <freq_helt+0x3>
	freq_deci = (freq * 100.0) - (freq_helt * 100); // Get the decimal part (2 digits)
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	48 ec       	ldi	r20, 0xC8	; 200
 628:	52 e4       	ldi	r21, 0x42	; 66
 62a:	c7 01       	movw	r24, r14
 62c:	b6 01       	movw	r22, r12
 62e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__mulsf3>
 632:	6b 01       	movw	r12, r22
 634:	7c 01       	movw	r14, r24
 636:	a4 e6       	ldi	r26, 0x64	; 100
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	a5 01       	movw	r20, r10
 63c:	94 01       	movw	r18, r8
 63e:	0e 94 77 06 	call	0xcee	; 0xcee <__muluhisi3>
 642:	0e 94 6f 05 	call	0xade	; 0xade <__floatsisf>
 646:	9b 01       	movw	r18, r22
 648:	ac 01       	movw	r20, r24
 64a:	c7 01       	movw	r24, r14
 64c:	b6 01       	movw	r22, r12
 64e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__subsf3>
 652:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixsfsi>
 656:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <freq_deci+0x1>
 65a:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <freq_deci>

	// Line 1

	LCD_goto(ROW1+17);
 65e:	81 e1       	ldi	r24, 0x11	; 17
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puts(" Hz");
 666:	82 e1       	ldi	r24, 0x12	; 18
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_puts>
	
	LCD_goto(ROW1+12);
 66e:	8c e0       	ldi	r24, 0x0C	; 12
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puti(freq_deci);
 676:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <freq_deci>
 67a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <freq_deci+0x1>
 67e:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_puti>

	LCD_goto(ROW1+14);
 682:	8e e0       	ldi	r24, 0x0E	; 14
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_putc(',');
 68a:	8c e2       	ldi	r24, 0x2C	; 44
 68c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>

	LCD_goto(ROW1+9);
 690:	89 e0       	ldi	r24, 0x09	; 9
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puti(freq_helt);
 698:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <freq_helt>
 69c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <freq_helt+0x1>
 6a0:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_puti>

	if (freq_deci < 10)
 6a4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <freq_deci>
 6a8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <freq_deci+0x1>
 6ac:	0a 97       	sbiw	r24, 0x0a	; 10
 6ae:	3c f4       	brge	.+14     	; 0x6be <FREQ_count+0x13a>
	{
		LCD_goto(ROW1+15);
 6b0:	8f e0       	ldi	r24, 0x0F	; 15
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
		LCD_putc('0');
 6b8:	80 e3       	ldi	r24, 0x30	; 48
 6ba:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_putc>
	}

	LCD_goto(ROW1);
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puts("Freq.:");
 6c6:	86 e1       	ldi	r24, 0x16	; 22
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_puts>

	// Line 2

	LCD_goto(ROW2+12);
 6ce:	8c e4       	ldi	r24, 0x4C	; 76
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puti(presc[i]);
 6d6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <i>
 6da:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <i+0x1>
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	ea 5f       	subi	r30, 0xFA	; 250
 6e4:	fe 4f       	sbci	r31, 0xFE	; 254
 6e6:	80 81       	ld	r24, Z
 6e8:	91 81       	ldd	r25, Z+1	; 0x01
 6ea:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_puti>

	LCD_goto(ROW2);
 6ee:	80 e4       	ldi	r24, 0x40	; 64
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puts("Prescaler:");
 6f6:	8d e1       	ldi	r24, 0x1D	; 29
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_puts>

	// Line 3

	LCD_goto(ROW3+12);
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puti(count);
 706:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count>
 70a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count+0x1>
 70e:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_puti>

	LCD_goto(ROW3);
 712:	84 e1       	ldi	r24, 0x14	; 20
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	LCD_puts("Count:");
 71a:	88 e2       	ldi	r24, 0x28	; 40
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_puts>

	// Line 4

	LCD_goto(ROW4+1);
 722:	85 e5       	ldi	r24, 0x55	; 85
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 12 02 	call	0x424	; 0x424 <LCD_goto>
	
	// Reinitialize interrupt settings after each frequency update
	INT_init();
 72a:	0e 94 a5 02 	call	0x54a	; 0x54a <INT_init>
 72e:	ff 90       	pop	r15
 730:	ef 90       	pop	r14
 732:	df 90       	pop	r13
 734:	cf 90       	pop	r12
 736:	bf 90       	pop	r11
 738:	af 90       	pop	r10
 73a:	9f 90       	pop	r9
 73c:	8f 90       	pop	r8
 73e:	08 95       	ret

00000740 <main>:
int freq_deci; // Decimal part of freq

int main (void)
{
	// Initialize ports, LCD, interrupts and freq calculations
	PORT_init();
 740:	0e 94 a1 02 	call	0x542	; 0x542 <PORT_init>
	LCD_init();
 744:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_init>
	INT_init();
 748:	0e 94 a5 02 	call	0x54a	; 0x54a <INT_init>
	FREQ_count();
 74c:	0e 94 c2 02 	call	0x584	; 0x584 <FREQ_count>
 750:	ff cf       	rjmp	.-2      	; 0x750 <main+0x10>

00000752 <__vector_1>:
}

// Interrupt service routine for INT0
// INT0 is an external interrupt on AVR microcontrollers
ISR(INT0_vect)
{
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
	cli(); // Disable global interrupts to safely modify variables
 774:	f8 94       	cli
	
	// Check if pin 3 on port B is high or low to determine the direction of rotation
	if (bit_is_set(PINB, 3))
 776:	1b 9b       	sbis	0x03, 3	; 3
 778:	0f c0       	rjmp	.+30     	; 0x798 <__vector_1+0x46>
	{
		count += steg; // Increase (higher freq)
 77a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count>
 77e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <count+0x1>
 782:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 786:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 78a:	82 0f       	add	r24, r18
 78c:	93 1f       	adc	r25, r19
 78e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <count+0x1>
 792:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count>
 796:	10 c0       	rjmp	.+32     	; 0x7b8 <__vector_1+0x66>
	}
	else if (bit_is_clear(PINB, 3))
 798:	1b 99       	sbic	0x03, 3	; 3
 79a:	0e c0       	rjmp	.+28     	; 0x7b8 <__vector_1+0x66>
	{
		count -= steg; // Decrease (lower freq)
 79c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count>
 7a0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count+0x1>
 7a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7a8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7ac:	82 1b       	sub	r24, r18
 7ae:	93 0b       	sbc	r25, r19
 7b0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <count+0x1>
 7b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count>
 7b8:	2f e7       	ldi	r18, 0x7F	; 127
 7ba:	8a e1       	ldi	r24, 0x1A	; 26
 7bc:	96 e0       	ldi	r25, 0x06	; 6
 7be:	21 50       	subi	r18, 0x01	; 1
 7c0:	80 40       	sbci	r24, 0x00	; 0
 7c2:	90 40       	sbci	r25, 0x00	; 0
 7c4:	e1 f7       	brne	.-8      	; 0x7be <__vector_1+0x6c>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <__vector_1+0x76>
 7c8:	00 00       	nop
	}
	
	_delay_ms(100);

	FREQ_count(); // Recalculate and update freq
 7ca:	0e 94 c2 02 	call	0x584	; 0x584 <FREQ_count>
}
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <__vector_5>:
	sei(); // Re-enable global interrupts
}

// Interrupt service routine for PCINT1 (handles additional encoder buttons)
ISR(PCINT1_vect)
{
 7f0:	1f 92       	push	r1
 7f2:	0f 92       	push	r0
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	0f 92       	push	r0
 7f8:	11 24       	eor	r1, r1
 7fa:	2f 93       	push	r18
 7fc:	3f 93       	push	r19
 7fe:	4f 93       	push	r20
 800:	5f 93       	push	r21
 802:	6f 93       	push	r22
 804:	7f 93       	push	r23
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	af 93       	push	r26
 80c:	bf 93       	push	r27
 80e:	ef 93       	push	r30
 810:	ff 93       	push	r31
	// Check the state of the encoder buttons and modify 'i' for prescaler selection
	if (bit_is_clear(PINB, 2))
 812:	1a 99       	sbic	0x03, 2	; 3
 814:	0a c0       	rjmp	.+20     	; 0x82a <__EEPROM_REGION_LENGTH__+0x2a>
	i++;
 816:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 81a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <i+0x1>
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 824:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 828:	14 c0       	rjmp	.+40     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
	else if (bit_is_clear(PINB, 1))
 82a:	19 99       	sbic	0x03, 1	; 3
 82c:	07 c0       	rjmp	.+14     	; 0x83c <__EEPROM_REGION_LENGTH__+0x3c>
	i = 2;
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 836:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 83a:	0b c0       	rjmp	.+22     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
	else if (bit_is_clear(PINB, 0))
 83c:	18 99       	sbic	0x03, 0	; 3
 83e:	09 c0       	rjmp	.+18     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
	i--;
 840:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 844:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <i+0x1>
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 84e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
	
	// Ensure 'i' stays within the bounds of the prescaler array
	if (i < 0) i = 0;
 852:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 856:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <i+0x1>
 85a:	99 23       	and	r25, r25
 85c:	2c f4       	brge	.+10     	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 85e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <i+0x1>
 862:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <i>
 866:	08 c0       	rjmp	.+16     	; 0x878 <__EEPROM_REGION_LENGTH__+0x78>
	else if (i > 4) i = 4;
 868:	05 97       	sbiw	r24, 0x05	; 5
 86a:	34 f0       	brlt	.+12     	; 0x878 <__EEPROM_REGION_LENGTH__+0x78>
 86c:	84 e0       	ldi	r24, 0x04	; 4
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 874:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 878:	2f e7       	ldi	r18, 0x7F	; 127
 87a:	8a e1       	ldi	r24, 0x1A	; 26
 87c:	96 e0       	ldi	r25, 0x06	; 6
 87e:	21 50       	subi	r18, 0x01	; 1
 880:	80 40       	sbci	r24, 0x00	; 0
 882:	90 40       	sbci	r25, 0x00	; 0
 884:	e1 f7       	brne	.-8      	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 886:	00 c0       	rjmp	.+0      	; 0x888 <__EEPROM_REGION_LENGTH__+0x88>
 888:	00 00       	nop

	_delay_ms(100);

	FREQ_count();
 88a:	0e 94 c2 02 	call	0x584	; 0x584 <FREQ_count>
}
 88e:	ff 91       	pop	r31
 890:	ef 91       	pop	r30
 892:	bf 91       	pop	r27
 894:	af 91       	pop	r26
 896:	9f 91       	pop	r25
 898:	8f 91       	pop	r24
 89a:	7f 91       	pop	r23
 89c:	6f 91       	pop	r22
 89e:	5f 91       	pop	r21
 8a0:	4f 91       	pop	r20
 8a2:	3f 91       	pop	r19
 8a4:	2f 91       	pop	r18
 8a6:	0f 90       	pop	r0
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	0f 90       	pop	r0
 8ac:	1f 90       	pop	r1
 8ae:	18 95       	reti

000008b0 <__subsf3>:
 8b0:	50 58       	subi	r21, 0x80	; 128

000008b2 <__addsf3>:
 8b2:	bb 27       	eor	r27, r27
 8b4:	aa 27       	eor	r26, r26
 8b6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__addsf3x>
 8ba:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_round>
 8be:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_pscA>
 8c2:	38 f0       	brcs	.+14     	; 0x8d2 <__addsf3+0x20>
 8c4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscB>
 8c8:	20 f0       	brcs	.+8      	; 0x8d2 <__addsf3+0x20>
 8ca:	39 f4       	brne	.+14     	; 0x8da <__addsf3+0x28>
 8cc:	9f 3f       	cpi	r25, 0xFF	; 255
 8ce:	19 f4       	brne	.+6      	; 0x8d6 <__addsf3+0x24>
 8d0:	26 f4       	brtc	.+8      	; 0x8da <__addsf3+0x28>
 8d2:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_nan>
 8d6:	0e f4       	brtc	.+2      	; 0x8da <__addsf3+0x28>
 8d8:	e0 95       	com	r30
 8da:	e7 fb       	bst	r30, 7
 8dc:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_inf>

000008e0 <__addsf3x>:
 8e0:	e9 2f       	mov	r30, r25
 8e2:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_split3>
 8e6:	58 f3       	brcs	.-42     	; 0x8be <__addsf3+0xc>
 8e8:	ba 17       	cp	r27, r26
 8ea:	62 07       	cpc	r22, r18
 8ec:	73 07       	cpc	r23, r19
 8ee:	84 07       	cpc	r24, r20
 8f0:	95 07       	cpc	r25, r21
 8f2:	20 f0       	brcs	.+8      	; 0x8fc <__addsf3x+0x1c>
 8f4:	79 f4       	brne	.+30     	; 0x914 <__addsf3x+0x34>
 8f6:	a6 f5       	brtc	.+104    	; 0x960 <__addsf3x+0x80>
 8f8:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_zero>
 8fc:	0e f4       	brtc	.+2      	; 0x900 <__addsf3x+0x20>
 8fe:	e0 95       	com	r30
 900:	0b 2e       	mov	r0, r27
 902:	ba 2f       	mov	r27, r26
 904:	a0 2d       	mov	r26, r0
 906:	0b 01       	movw	r0, r22
 908:	b9 01       	movw	r22, r18
 90a:	90 01       	movw	r18, r0
 90c:	0c 01       	movw	r0, r24
 90e:	ca 01       	movw	r24, r20
 910:	a0 01       	movw	r20, r0
 912:	11 24       	eor	r1, r1
 914:	ff 27       	eor	r31, r31
 916:	59 1b       	sub	r21, r25
 918:	99 f0       	breq	.+38     	; 0x940 <__addsf3x+0x60>
 91a:	59 3f       	cpi	r21, 0xF9	; 249
 91c:	50 f4       	brcc	.+20     	; 0x932 <__addsf3x+0x52>
 91e:	50 3e       	cpi	r21, 0xE0	; 224
 920:	68 f1       	brcs	.+90     	; 0x97c <__addsf3x+0x9c>
 922:	1a 16       	cp	r1, r26
 924:	f0 40       	sbci	r31, 0x00	; 0
 926:	a2 2f       	mov	r26, r18
 928:	23 2f       	mov	r18, r19
 92a:	34 2f       	mov	r19, r20
 92c:	44 27       	eor	r20, r20
 92e:	58 5f       	subi	r21, 0xF8	; 248
 930:	f3 cf       	rjmp	.-26     	; 0x918 <__addsf3x+0x38>
 932:	46 95       	lsr	r20
 934:	37 95       	ror	r19
 936:	27 95       	ror	r18
 938:	a7 95       	ror	r26
 93a:	f0 40       	sbci	r31, 0x00	; 0
 93c:	53 95       	inc	r21
 93e:	c9 f7       	brne	.-14     	; 0x932 <__addsf3x+0x52>
 940:	7e f4       	brtc	.+30     	; 0x960 <__addsf3x+0x80>
 942:	1f 16       	cp	r1, r31
 944:	ba 0b       	sbc	r27, r26
 946:	62 0b       	sbc	r22, r18
 948:	73 0b       	sbc	r23, r19
 94a:	84 0b       	sbc	r24, r20
 94c:	ba f0       	brmi	.+46     	; 0x97c <__addsf3x+0x9c>
 94e:	91 50       	subi	r25, 0x01	; 1
 950:	a1 f0       	breq	.+40     	; 0x97a <__addsf3x+0x9a>
 952:	ff 0f       	add	r31, r31
 954:	bb 1f       	adc	r27, r27
 956:	66 1f       	adc	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	c2 f7       	brpl	.-16     	; 0x94e <__addsf3x+0x6e>
 95e:	0e c0       	rjmp	.+28     	; 0x97c <__addsf3x+0x9c>
 960:	ba 0f       	add	r27, r26
 962:	62 1f       	adc	r22, r18
 964:	73 1f       	adc	r23, r19
 966:	84 1f       	adc	r24, r20
 968:	48 f4       	brcc	.+18     	; 0x97c <__addsf3x+0x9c>
 96a:	87 95       	ror	r24
 96c:	77 95       	ror	r23
 96e:	67 95       	ror	r22
 970:	b7 95       	ror	r27
 972:	f7 95       	ror	r31
 974:	9e 3f       	cpi	r25, 0xFE	; 254
 976:	08 f0       	brcs	.+2      	; 0x97a <__addsf3x+0x9a>
 978:	b0 cf       	rjmp	.-160    	; 0x8da <__addsf3+0x28>
 97a:	93 95       	inc	r25
 97c:	88 0f       	add	r24, r24
 97e:	08 f0       	brcs	.+2      	; 0x982 <__addsf3x+0xa2>
 980:	99 27       	eor	r25, r25
 982:	ee 0f       	add	r30, r30
 984:	97 95       	ror	r25
 986:	87 95       	ror	r24
 988:	08 95       	ret

0000098a <__divsf3>:
 98a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__divsf3x>
 98e:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_round>
 992:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscB>
 996:	58 f0       	brcs	.+22     	; 0x9ae <__divsf3+0x24>
 998:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_pscA>
 99c:	40 f0       	brcs	.+16     	; 0x9ae <__divsf3+0x24>
 99e:	29 f4       	brne	.+10     	; 0x9aa <__divsf3+0x20>
 9a0:	5f 3f       	cpi	r21, 0xFF	; 255
 9a2:	29 f0       	breq	.+10     	; 0x9ae <__divsf3+0x24>
 9a4:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_inf>
 9a8:	51 11       	cpse	r21, r1
 9aa:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_szero>
 9ae:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_nan>

000009b2 <__divsf3x>:
 9b2:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_split3>
 9b6:	68 f3       	brcs	.-38     	; 0x992 <__divsf3+0x8>

000009b8 <__divsf3_pse>:
 9b8:	99 23       	and	r25, r25
 9ba:	b1 f3       	breq	.-20     	; 0x9a8 <__divsf3+0x1e>
 9bc:	55 23       	and	r21, r21
 9be:	91 f3       	breq	.-28     	; 0x9a4 <__divsf3+0x1a>
 9c0:	95 1b       	sub	r25, r21
 9c2:	55 0b       	sbc	r21, r21
 9c4:	bb 27       	eor	r27, r27
 9c6:	aa 27       	eor	r26, r26
 9c8:	62 17       	cp	r22, r18
 9ca:	73 07       	cpc	r23, r19
 9cc:	84 07       	cpc	r24, r20
 9ce:	38 f0       	brcs	.+14     	; 0x9de <__divsf3_pse+0x26>
 9d0:	9f 5f       	subi	r25, 0xFF	; 255
 9d2:	5f 4f       	sbci	r21, 0xFF	; 255
 9d4:	22 0f       	add	r18, r18
 9d6:	33 1f       	adc	r19, r19
 9d8:	44 1f       	adc	r20, r20
 9da:	aa 1f       	adc	r26, r26
 9dc:	a9 f3       	breq	.-22     	; 0x9c8 <__divsf3_pse+0x10>
 9de:	35 d0       	rcall	.+106    	; 0xa4a <__divsf3_pse+0x92>
 9e0:	0e 2e       	mov	r0, r30
 9e2:	3a f0       	brmi	.+14     	; 0x9f2 <__divsf3_pse+0x3a>
 9e4:	e0 e8       	ldi	r30, 0x80	; 128
 9e6:	32 d0       	rcall	.+100    	; 0xa4c <__divsf3_pse+0x94>
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	50 40       	sbci	r21, 0x00	; 0
 9ec:	e6 95       	lsr	r30
 9ee:	00 1c       	adc	r0, r0
 9f0:	ca f7       	brpl	.-14     	; 0x9e4 <__divsf3_pse+0x2c>
 9f2:	2b d0       	rcall	.+86     	; 0xa4a <__divsf3_pse+0x92>
 9f4:	fe 2f       	mov	r31, r30
 9f6:	29 d0       	rcall	.+82     	; 0xa4a <__divsf3_pse+0x92>
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	bb 1f       	adc	r27, r27
 a00:	26 17       	cp	r18, r22
 a02:	37 07       	cpc	r19, r23
 a04:	48 07       	cpc	r20, r24
 a06:	ab 07       	cpc	r26, r27
 a08:	b0 e8       	ldi	r27, 0x80	; 128
 a0a:	09 f0       	breq	.+2      	; 0xa0e <__divsf3_pse+0x56>
 a0c:	bb 0b       	sbc	r27, r27
 a0e:	80 2d       	mov	r24, r0
 a10:	bf 01       	movw	r22, r30
 a12:	ff 27       	eor	r31, r31
 a14:	93 58       	subi	r25, 0x83	; 131
 a16:	5f 4f       	sbci	r21, 0xFF	; 255
 a18:	3a f0       	brmi	.+14     	; 0xa28 <__divsf3_pse+0x70>
 a1a:	9e 3f       	cpi	r25, 0xFE	; 254
 a1c:	51 05       	cpc	r21, r1
 a1e:	78 f0       	brcs	.+30     	; 0xa3e <__divsf3_pse+0x86>
 a20:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_inf>
 a24:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_szero>
 a28:	5f 3f       	cpi	r21, 0xFF	; 255
 a2a:	e4 f3       	brlt	.-8      	; 0xa24 <__divsf3_pse+0x6c>
 a2c:	98 3e       	cpi	r25, 0xE8	; 232
 a2e:	d4 f3       	brlt	.-12     	; 0xa24 <__divsf3_pse+0x6c>
 a30:	86 95       	lsr	r24
 a32:	77 95       	ror	r23
 a34:	67 95       	ror	r22
 a36:	b7 95       	ror	r27
 a38:	f7 95       	ror	r31
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	c9 f7       	brne	.-14     	; 0xa30 <__divsf3_pse+0x78>
 a3e:	88 0f       	add	r24, r24
 a40:	91 1d       	adc	r25, r1
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret
 a4a:	e1 e0       	ldi	r30, 0x01	; 1
 a4c:	66 0f       	add	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	bb 1f       	adc	r27, r27
 a54:	62 17       	cp	r22, r18
 a56:	73 07       	cpc	r23, r19
 a58:	84 07       	cpc	r24, r20
 a5a:	ba 07       	cpc	r27, r26
 a5c:	20 f0       	brcs	.+8      	; 0xa66 <__divsf3_pse+0xae>
 a5e:	62 1b       	sub	r22, r18
 a60:	73 0b       	sbc	r23, r19
 a62:	84 0b       	sbc	r24, r20
 a64:	ba 0b       	sbc	r27, r26
 a66:	ee 1f       	adc	r30, r30
 a68:	88 f7       	brcc	.-30     	; 0xa4c <__divsf3_pse+0x94>
 a6a:	e0 95       	com	r30
 a6c:	08 95       	ret

00000a6e <__fixsfsi>:
 a6e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fixunssfsi>
 a72:	68 94       	set
 a74:	b1 11       	cpse	r27, r1
 a76:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_szero>
 a7a:	08 95       	ret

00000a7c <__fixunssfsi>:
 a7c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_splitA>
 a80:	88 f0       	brcs	.+34     	; 0xaa4 <__fixunssfsi+0x28>
 a82:	9f 57       	subi	r25, 0x7F	; 127
 a84:	98 f0       	brcs	.+38     	; 0xaac <__fixunssfsi+0x30>
 a86:	b9 2f       	mov	r27, r25
 a88:	99 27       	eor	r25, r25
 a8a:	b7 51       	subi	r27, 0x17	; 23
 a8c:	b0 f0       	brcs	.+44     	; 0xaba <__fixunssfsi+0x3e>
 a8e:	e1 f0       	breq	.+56     	; 0xac8 <__fixunssfsi+0x4c>
 a90:	66 0f       	add	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	88 1f       	adc	r24, r24
 a96:	99 1f       	adc	r25, r25
 a98:	1a f0       	brmi	.+6      	; 0xaa0 <__fixunssfsi+0x24>
 a9a:	ba 95       	dec	r27
 a9c:	c9 f7       	brne	.-14     	; 0xa90 <__fixunssfsi+0x14>
 a9e:	14 c0       	rjmp	.+40     	; 0xac8 <__fixunssfsi+0x4c>
 aa0:	b1 30       	cpi	r27, 0x01	; 1
 aa2:	91 f0       	breq	.+36     	; 0xac8 <__fixunssfsi+0x4c>
 aa4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_zero>
 aa8:	b1 e0       	ldi	r27, 0x01	; 1
 aaa:	08 95       	ret
 aac:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_zero>
 ab0:	67 2f       	mov	r22, r23
 ab2:	78 2f       	mov	r23, r24
 ab4:	88 27       	eor	r24, r24
 ab6:	b8 5f       	subi	r27, 0xF8	; 248
 ab8:	39 f0       	breq	.+14     	; 0xac8 <__fixunssfsi+0x4c>
 aba:	b9 3f       	cpi	r27, 0xF9	; 249
 abc:	cc f3       	brlt	.-14     	; 0xab0 <__fixunssfsi+0x34>
 abe:	86 95       	lsr	r24
 ac0:	77 95       	ror	r23
 ac2:	67 95       	ror	r22
 ac4:	b3 95       	inc	r27
 ac6:	d9 f7       	brne	.-10     	; 0xabe <__fixunssfsi+0x42>
 ac8:	3e f4       	brtc	.+14     	; 0xad8 <__fixunssfsi+0x5c>
 aca:	90 95       	com	r25
 acc:	80 95       	com	r24
 ace:	70 95       	com	r23
 ad0:	61 95       	neg	r22
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	08 95       	ret

00000ada <__floatunsisf>:
 ada:	e8 94       	clt
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <__floatsisf+0x12>

00000ade <__floatsisf>:
 ade:	97 fb       	bst	r25, 7
 ae0:	3e f4       	brtc	.+14     	; 0xaf0 <__floatsisf+0x12>
 ae2:	90 95       	com	r25
 ae4:	80 95       	com	r24
 ae6:	70 95       	com	r23
 ae8:	61 95       	neg	r22
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	99 23       	and	r25, r25
 af2:	a9 f0       	breq	.+42     	; 0xb1e <__floatsisf+0x40>
 af4:	f9 2f       	mov	r31, r25
 af6:	96 e9       	ldi	r25, 0x96	; 150
 af8:	bb 27       	eor	r27, r27
 afa:	93 95       	inc	r25
 afc:	f6 95       	lsr	r31
 afe:	87 95       	ror	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b7 95       	ror	r27
 b06:	f1 11       	cpse	r31, r1
 b08:	f8 cf       	rjmp	.-16     	; 0xafa <__floatsisf+0x1c>
 b0a:	fa f4       	brpl	.+62     	; 0xb4a <__floatsisf+0x6c>
 b0c:	bb 0f       	add	r27, r27
 b0e:	11 f4       	brne	.+4      	; 0xb14 <__floatsisf+0x36>
 b10:	60 ff       	sbrs	r22, 0
 b12:	1b c0       	rjmp	.+54     	; 0xb4a <__floatsisf+0x6c>
 b14:	6f 5f       	subi	r22, 0xFF	; 255
 b16:	7f 4f       	sbci	r23, 0xFF	; 255
 b18:	8f 4f       	sbci	r24, 0xFF	; 255
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	16 c0       	rjmp	.+44     	; 0xb4a <__floatsisf+0x6c>
 b1e:	88 23       	and	r24, r24
 b20:	11 f0       	breq	.+4      	; 0xb26 <__floatsisf+0x48>
 b22:	96 e9       	ldi	r25, 0x96	; 150
 b24:	11 c0       	rjmp	.+34     	; 0xb48 <__floatsisf+0x6a>
 b26:	77 23       	and	r23, r23
 b28:	21 f0       	breq	.+8      	; 0xb32 <__floatsisf+0x54>
 b2a:	9e e8       	ldi	r25, 0x8E	; 142
 b2c:	87 2f       	mov	r24, r23
 b2e:	76 2f       	mov	r23, r22
 b30:	05 c0       	rjmp	.+10     	; 0xb3c <__floatsisf+0x5e>
 b32:	66 23       	and	r22, r22
 b34:	71 f0       	breq	.+28     	; 0xb52 <__floatsisf+0x74>
 b36:	96 e8       	ldi	r25, 0x86	; 134
 b38:	86 2f       	mov	r24, r22
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	60 e0       	ldi	r22, 0x00	; 0
 b3e:	2a f0       	brmi	.+10     	; 0xb4a <__floatsisf+0x6c>
 b40:	9a 95       	dec	r25
 b42:	66 0f       	add	r22, r22
 b44:	77 1f       	adc	r23, r23
 b46:	88 1f       	adc	r24, r24
 b48:	da f7       	brpl	.-10     	; 0xb40 <__floatsisf+0x62>
 b4a:	88 0f       	add	r24, r24
 b4c:	96 95       	lsr	r25
 b4e:	87 95       	ror	r24
 b50:	97 f9       	bld	r25, 7
 b52:	08 95       	ret

00000b54 <__fp_inf>:
 b54:	97 f9       	bld	r25, 7
 b56:	9f 67       	ori	r25, 0x7F	; 127
 b58:	80 e8       	ldi	r24, 0x80	; 128
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	08 95       	ret

00000b60 <__fp_nan>:
 b60:	9f ef       	ldi	r25, 0xFF	; 255
 b62:	80 ec       	ldi	r24, 0xC0	; 192
 b64:	08 95       	ret

00000b66 <__fp_pscA>:
 b66:	00 24       	eor	r0, r0
 b68:	0a 94       	dec	r0
 b6a:	16 16       	cp	r1, r22
 b6c:	17 06       	cpc	r1, r23
 b6e:	18 06       	cpc	r1, r24
 b70:	09 06       	cpc	r0, r25
 b72:	08 95       	ret

00000b74 <__fp_pscB>:
 b74:	00 24       	eor	r0, r0
 b76:	0a 94       	dec	r0
 b78:	12 16       	cp	r1, r18
 b7a:	13 06       	cpc	r1, r19
 b7c:	14 06       	cpc	r1, r20
 b7e:	05 06       	cpc	r0, r21
 b80:	08 95       	ret

00000b82 <__fp_round>:
 b82:	09 2e       	mov	r0, r25
 b84:	03 94       	inc	r0
 b86:	00 0c       	add	r0, r0
 b88:	11 f4       	brne	.+4      	; 0xb8e <__fp_round+0xc>
 b8a:	88 23       	and	r24, r24
 b8c:	52 f0       	brmi	.+20     	; 0xba2 <__fp_round+0x20>
 b8e:	bb 0f       	add	r27, r27
 b90:	40 f4       	brcc	.+16     	; 0xba2 <__fp_round+0x20>
 b92:	bf 2b       	or	r27, r31
 b94:	11 f4       	brne	.+4      	; 0xb9a <__fp_round+0x18>
 b96:	60 ff       	sbrs	r22, 0
 b98:	04 c0       	rjmp	.+8      	; 0xba2 <__fp_round+0x20>
 b9a:	6f 5f       	subi	r22, 0xFF	; 255
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	08 95       	ret

00000ba4 <__fp_split3>:
 ba4:	57 fd       	sbrc	r21, 7
 ba6:	90 58       	subi	r25, 0x80	; 128
 ba8:	44 0f       	add	r20, r20
 baa:	55 1f       	adc	r21, r21
 bac:	59 f0       	breq	.+22     	; 0xbc4 <__fp_splitA+0x10>
 bae:	5f 3f       	cpi	r21, 0xFF	; 255
 bb0:	71 f0       	breq	.+28     	; 0xbce <__fp_splitA+0x1a>
 bb2:	47 95       	ror	r20

00000bb4 <__fp_splitA>:
 bb4:	88 0f       	add	r24, r24
 bb6:	97 fb       	bst	r25, 7
 bb8:	99 1f       	adc	r25, r25
 bba:	61 f0       	breq	.+24     	; 0xbd4 <__fp_splitA+0x20>
 bbc:	9f 3f       	cpi	r25, 0xFF	; 255
 bbe:	79 f0       	breq	.+30     	; 0xbde <__fp_splitA+0x2a>
 bc0:	87 95       	ror	r24
 bc2:	08 95       	ret
 bc4:	12 16       	cp	r1, r18
 bc6:	13 06       	cpc	r1, r19
 bc8:	14 06       	cpc	r1, r20
 bca:	55 1f       	adc	r21, r21
 bcc:	f2 cf       	rjmp	.-28     	; 0xbb2 <__fp_split3+0xe>
 bce:	46 95       	lsr	r20
 bd0:	f1 df       	rcall	.-30     	; 0xbb4 <__fp_splitA>
 bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <__fp_splitA+0x30>
 bd4:	16 16       	cp	r1, r22
 bd6:	17 06       	cpc	r1, r23
 bd8:	18 06       	cpc	r1, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	f1 cf       	rjmp	.-30     	; 0xbc0 <__fp_splitA+0xc>
 bde:	86 95       	lsr	r24
 be0:	71 05       	cpc	r23, r1
 be2:	61 05       	cpc	r22, r1
 be4:	08 94       	sec
 be6:	08 95       	ret

00000be8 <__fp_zero>:
 be8:	e8 94       	clt

00000bea <__fp_szero>:
 bea:	bb 27       	eor	r27, r27
 bec:	66 27       	eor	r22, r22
 bee:	77 27       	eor	r23, r23
 bf0:	cb 01       	movw	r24, r22
 bf2:	97 f9       	bld	r25, 7
 bf4:	08 95       	ret

00000bf6 <__mulsf3>:
 bf6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__mulsf3x>
 bfa:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_round>
 bfe:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_pscA>
 c02:	38 f0       	brcs	.+14     	; 0xc12 <__mulsf3+0x1c>
 c04:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscB>
 c08:	20 f0       	brcs	.+8      	; 0xc12 <__mulsf3+0x1c>
 c0a:	95 23       	and	r25, r21
 c0c:	11 f0       	breq	.+4      	; 0xc12 <__mulsf3+0x1c>
 c0e:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_inf>
 c12:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_nan>
 c16:	11 24       	eor	r1, r1
 c18:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_szero>

00000c1c <__mulsf3x>:
 c1c:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_split3>
 c20:	70 f3       	brcs	.-36     	; 0xbfe <__mulsf3+0x8>

00000c22 <__mulsf3_pse>:
 c22:	95 9f       	mul	r25, r21
 c24:	c1 f3       	breq	.-16     	; 0xc16 <__mulsf3+0x20>
 c26:	95 0f       	add	r25, r21
 c28:	50 e0       	ldi	r21, 0x00	; 0
 c2a:	55 1f       	adc	r21, r21
 c2c:	62 9f       	mul	r22, r18
 c2e:	f0 01       	movw	r30, r0
 c30:	72 9f       	mul	r23, r18
 c32:	bb 27       	eor	r27, r27
 c34:	f0 0d       	add	r31, r0
 c36:	b1 1d       	adc	r27, r1
 c38:	63 9f       	mul	r22, r19
 c3a:	aa 27       	eor	r26, r26
 c3c:	f0 0d       	add	r31, r0
 c3e:	b1 1d       	adc	r27, r1
 c40:	aa 1f       	adc	r26, r26
 c42:	64 9f       	mul	r22, r20
 c44:	66 27       	eor	r22, r22
 c46:	b0 0d       	add	r27, r0
 c48:	a1 1d       	adc	r26, r1
 c4a:	66 1f       	adc	r22, r22
 c4c:	82 9f       	mul	r24, r18
 c4e:	22 27       	eor	r18, r18
 c50:	b0 0d       	add	r27, r0
 c52:	a1 1d       	adc	r26, r1
 c54:	62 1f       	adc	r22, r18
 c56:	73 9f       	mul	r23, r19
 c58:	b0 0d       	add	r27, r0
 c5a:	a1 1d       	adc	r26, r1
 c5c:	62 1f       	adc	r22, r18
 c5e:	83 9f       	mul	r24, r19
 c60:	a0 0d       	add	r26, r0
 c62:	61 1d       	adc	r22, r1
 c64:	22 1f       	adc	r18, r18
 c66:	74 9f       	mul	r23, r20
 c68:	33 27       	eor	r19, r19
 c6a:	a0 0d       	add	r26, r0
 c6c:	61 1d       	adc	r22, r1
 c6e:	23 1f       	adc	r18, r19
 c70:	84 9f       	mul	r24, r20
 c72:	60 0d       	add	r22, r0
 c74:	21 1d       	adc	r18, r1
 c76:	82 2f       	mov	r24, r18
 c78:	76 2f       	mov	r23, r22
 c7a:	6a 2f       	mov	r22, r26
 c7c:	11 24       	eor	r1, r1
 c7e:	9f 57       	subi	r25, 0x7F	; 127
 c80:	50 40       	sbci	r21, 0x00	; 0
 c82:	9a f0       	brmi	.+38     	; 0xcaa <__mulsf3_pse+0x88>
 c84:	f1 f0       	breq	.+60     	; 0xcc2 <__mulsf3_pse+0xa0>
 c86:	88 23       	and	r24, r24
 c88:	4a f0       	brmi	.+18     	; 0xc9c <__mulsf3_pse+0x7a>
 c8a:	ee 0f       	add	r30, r30
 c8c:	ff 1f       	adc	r31, r31
 c8e:	bb 1f       	adc	r27, r27
 c90:	66 1f       	adc	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	91 50       	subi	r25, 0x01	; 1
 c98:	50 40       	sbci	r21, 0x00	; 0
 c9a:	a9 f7       	brne	.-22     	; 0xc86 <__mulsf3_pse+0x64>
 c9c:	9e 3f       	cpi	r25, 0xFE	; 254
 c9e:	51 05       	cpc	r21, r1
 ca0:	80 f0       	brcs	.+32     	; 0xcc2 <__mulsf3_pse+0xa0>
 ca2:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_inf>
 ca6:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_szero>
 caa:	5f 3f       	cpi	r21, 0xFF	; 255
 cac:	e4 f3       	brlt	.-8      	; 0xca6 <__mulsf3_pse+0x84>
 cae:	98 3e       	cpi	r25, 0xE8	; 232
 cb0:	d4 f3       	brlt	.-12     	; 0xca6 <__mulsf3_pse+0x84>
 cb2:	86 95       	lsr	r24
 cb4:	77 95       	ror	r23
 cb6:	67 95       	ror	r22
 cb8:	b7 95       	ror	r27
 cba:	f7 95       	ror	r31
 cbc:	e7 95       	ror	r30
 cbe:	9f 5f       	subi	r25, 0xFF	; 255
 cc0:	c1 f7       	brne	.-16     	; 0xcb2 <__mulsf3_pse+0x90>
 cc2:	fe 2b       	or	r31, r30
 cc4:	88 0f       	add	r24, r24
 cc6:	91 1d       	adc	r25, r1
 cc8:	96 95       	lsr	r25
 cca:	87 95       	ror	r24
 ccc:	97 f9       	bld	r25, 7
 cce:	08 95       	ret

00000cd0 <__umulhisi3>:
 cd0:	a2 9f       	mul	r26, r18
 cd2:	b0 01       	movw	r22, r0
 cd4:	b3 9f       	mul	r27, r19
 cd6:	c0 01       	movw	r24, r0
 cd8:	a3 9f       	mul	r26, r19
 cda:	70 0d       	add	r23, r0
 cdc:	81 1d       	adc	r24, r1
 cde:	11 24       	eor	r1, r1
 ce0:	91 1d       	adc	r25, r1
 ce2:	b2 9f       	mul	r27, r18
 ce4:	70 0d       	add	r23, r0
 ce6:	81 1d       	adc	r24, r1
 ce8:	11 24       	eor	r1, r1
 cea:	91 1d       	adc	r25, r1
 cec:	08 95       	ret

00000cee <__muluhisi3>:
 cee:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__umulhisi3>
 cf2:	a5 9f       	mul	r26, r21
 cf4:	90 0d       	add	r25, r0
 cf6:	b4 9f       	mul	r27, r20
 cf8:	90 0d       	add	r25, r0
 cfa:	a4 9f       	mul	r26, r20
 cfc:	80 0d       	add	r24, r0
 cfe:	91 1d       	adc	r25, r1
 d00:	11 24       	eor	r1, r1
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
